
R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> x=5
> x
[1] 5
> y=x*2                    
> z=x+y
> z
[1] 15
> # capital and small letters are treated differently
> x=10
> X
Error: object 'X' not found
> X=60
> X
[1] 60
> x+X
[1] 70
> 
> # combine numbers into vecror
> # using c(1,2,23,)
> 
> x=1,2,3,4,5
Error: unexpected ',' in "x=1,"
> x = (1,2,3,4,5)
Error: unexpected ',' in "x = (1,"
> x = c(1,2,3,4,5)
> x
[1] 1 2 3 4 5
> 
> # R AS CALCULATOR
> 
> 3+5
[1] 8
> 5-6
[1] -1
> 2*0
[1] 0
> 1/2
[1] 0.5
> 2*3-4+5/6
[1] 2.833333
> #follows BODMAS
> 
> 2^3
[1] 8
> 2**3
[1] 8
> 2^0.1
[1] 1.071773
> 2**0.1
[1] 1.071773
> 2^-1
[1] 0.5
> 2^3^2
[1] 512
> 2^3^2^4
[1] Inf
> 2^3^2^1
[1] 512
> 2^3^2  # is equivalent to 2^(3^2)  start applying brackets from right
[1] 512
> (2^3)^2
[1] 64
> 
> # APPLICATION TO A VECTOR OR LIST
> c(1,2,3,4,5)^2
[1]  1  4  9 16 25
> c(2,3,5,7)^c(2,1)
[1]  4  3 25  7
> # in above command, it is solved as 2^2, 3^1, 5^2, 7^1
> c(1,2,3,4,5,6)^c(2,3,4)   # it will be solved as 1^2, 2^3, 3^4, 4^2, 5^3, 6^4
[1]    1    8   81   16  125 1296
> c(2,3,4,5)*3
[1]  6  9 12 15
> c(2,3,4,5)*c(1,2)
[1]  2  6  4 10
> c(1,2.3)*c(3,4,5,6)
[1]  3.0  9.2  5.0 13.8
> 
> # INTEGER DIVISION - DIVISION IN WHICH THE FRACTIONAL PART(REMAINDER) IS DISCARDED
> # SYMBOL USED --   %/%
> c(2,3,4,5) %/% 2
[1] 1 1 2 2
> 
> #   %% --> modulo operation finds the remainder 
> c(2,3,5,7) %% 2
[1] 0 1 1 1
> 
> # max and min
> max(1.2,4,5.60)
[1] 5.6
> min(1.23,4,6)
[1] 1.23
> 
> # some common functions
> # abs()  gives absolute value
> abs(-4.2)
[1] 4.2
> sqrt(6)
[1] 2.44949
> sqrt(c(4,5,6,7))
[1] 2.000000 2.236068 2.449490 2.645751
> sum(c(2,4,5,3)
+ sum(c(2,4,5,3))
Error: unexpected symbol in:
"sum(c(2,4,5,3)
sum"
> sum(c(2,3,5,6,7,8,9))
[1] 40
> sum(2,4,7)
[1] 13
> prod(2,3,4,5)
[1] 120
> prod(c(2,3,4,5))
[1] 120
> round(1.234)
[1] 1
> round(1.9999)
[1] 2
> round(1.5)
[1] 2
> round(1.500000)
[1] 2
> -------------------------------------------------------------
+ # log() == ln  ||   
+ log(10)     # this gib=ves ln(10)
[1] -2.302585
> log(10)
[1] 2.302585
> log10
function (x)  .Primitive("log10")
> log10(2)
[1] 0.30103
> log3(1)
Error in log3(1) : could not find function "log3"
> log2(8)
[1] 3
> log10(1000)
[1] 3
> # log2 and log10 functions are defined . log2 means log to the base 2. log10 means log to the base 10.
> 
